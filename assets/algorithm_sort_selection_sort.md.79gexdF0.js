import{p as o,v as N,q as R,c as b,o as C,j as i,ae as _,af as S,t as j,C as H,ag as f,G as n,w as e,a as l}from"./chunks/framework.BZdfrRur.js";import{s as T,R as $}from"./chunks/visual.DiLKMx0U.js";const z={class:"hsAV-visu"},L={class:"hsAV-visu_option"},M={class:"hsAV-visu_option_array_control"},G={class:"hsAV-visu_option_array_control-length"},O=["disabled"],U={class:"hsAV-visu_option_array_control-interval"},J=["disabled"],K={class:"hsAV-visu_option_array_control-button"},Q=["disabled"],W=["disabled"],X={key:0,class:"text"},Y={key:1,class:"text"},Z={class:"hsAV-visu_option_array_value"},ss={__name:"selection_sort",setup(V){const E=o(),s=o(),t=o(300),r=o(new Array),u=o(!1),A=o(!1);let p=new Array,g=new Array,k=new Array,D=0,x=0,v=0;N(()=>{window.addEventListener("resize",()=>{m()})}),R(s,()=>{s.value>500?s.value=500:s.value<0||typeof s.value!="number"?s.value=0:s.value&&typeof s.value=="number"&&P(s.value)});const c=()=>{B(),d()},w=async()=>{if(u.value=!0,A.value=!0,p.length>=2){k=new Array(p.length);for(let a=0;a<p.length;a++)k[a]={index:a,value:g[a]};for(let a=0;a<k.length-1;a++){let h=a;for(let F=a;F<k.length;F++)d([{index:a,color:"#98fb98"},{index:F,color:"#ffff20"},{index:h,color:"#FFFFFF"}]),await T(t.value),k[h].value>=k[F].value&&(h=F);let y=k[h];k[h]=k[a],k[a]=y,q(),I(),d([{index:h,color:"#98fb98"},{index:a,color:"#ffff20"}]),await T(t.value+600),d([{index:a,color:"#98fb98"},{index:h,color:"#ffff20"}])}}d(),u.value=!1,A.value=!1},P=a=>{s.value=a,m(),B(),d()},m=()=>{D=E.value.getBoundingClientRect().width/s.value,x=E.value.getBoundingClientRect().height},B=()=>{v=0,r.value=new Array(s.value),g=new Array(s.value),p=new Array(s.value);for(let a=0;a<r.value.length;a++)r.value[a]=Math.round(Math.random()*1e3),r.value[a]>v&&(v=r.value[a]),g[a]=r.value[a],p[a]=a},q=()=>{for(let a=0;a<k.length;a++)p[k[a].index]=a},I=()=>{for(let a=0;a<p.length;a++)r.value[p[a]]=g[a]},d=(a=[{index:-1,color:"red"}])=>{$(g,p,D,x,v,a,E.value)};return(a,h)=>(C(),b("div",z,[i("div",{class:"hsAV-visu_visual",ref_key:"visualDiv",ref:E},null,512),i("div",L,[i("div",M,[i("div",G,[h[2]||(h[2]=i("span",{class:"text"},"数组长度",-1)),_(i("input",{type:"number","onUpdate:modelValue":h[0]||(h[0]=y=>s.value=y),disabled:u.value,min:"0",max:"500",placeholder:"0 - 500"},null,8,O),[[S,s.value]])]),i("div",U,[h[3]||(h[3]=i("span",{class:"text"},"动画间隔",-1)),_(i("input",{type:"number","onUpdate:modelValue":h[1]||(h[1]=y=>t.value=y),disabled:u.value,min:"0",max:"1000",placeholder:"1000"},null,8,J),[[S,t.value]])]),i("div",K,[i("button",{class:"reassign",disabled:u.value,onClick:c},h[4]||(h[4]=[i("div",{class:"text"},"重新赋值",-1)]),8,Q),i("button",{class:"start",disabled:A.value,onClick:w},[A.value?(C(),b("div",X,"运行中")):(C(),b("div",Y,"开始"))],8,W)])]),i("div",Z,[h[5]||(h[5]=i("div",{class:"text"},"数组：",-1)),i("div",null,j(r.value),1)])])]))}},is={tabindex:"0"},ls={tabindex:"0"},as={tabindex:"0"},ts={tabindex:"0"},ns={tabindex:"0"},es={tabindex:"0"},rs=JSON.parse('{"title":"选择排序 Selection Sort","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/selection_sort.md","filePath":"algorithm/sort/selection_sort.md"}'),hs={name:"algorithm/sort/selection_sort.md"},ds=Object.assign(hs,{setup(V){return(E,s)=>{const t=H("font");return C(),b("div",null,[s[42]||(s[42]=f('<h1 id="选择排序-selection-sort" tabindex="-1">选择排序 Selection Sort <a class="header-anchor" href="#选择排序-selection-sort" aria-label="Permalink to &quot;选择排序 Selection Sort&quot;">​</a></h1><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>选择排序（Selection Sort）是一种简单且直观的排序算法。其基本思想是：每一次从未排序部分中选出最小（或最大）的元素，将其放到已排序部分的末尾。</p><p>其具体步骤如下：</p><ol><li>寻找最小（或最大）元素：在未排序部分中找到最小（或最大）的元素。</li><li>交换位置：将这个元素与未排序部分的第一个元素交换位置。</li><li>重复上述步骤：对剩余未排序部分继续执行，直到所有元素都排序完成。</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>有一组无序数组：</p><table tabindex="0"><thead><tr><th>6</th><th>2</th><th>4</th><th>1</th><th>9</th><th>0</th><th>3</th></tr></thead></table><p>选择其中的最小值<code>0</code>与第一个元素<code>6</code>替换。</p><p>此时数组为：</p>',10)),i("table",is,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[0]||(s[0]=[l("0")])),_:1})]),s[2]||(s[2]=i("th",null,"2",-1)),s[3]||(s[3]=i("th",null,"4",-1)),s[4]||(s[4]=i("th",null,"1",-1)),s[5]||(s[5]=i("th",null,"9",-1)),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[1]||(s[1]=[l("6")])),_:1})]),s[6]||(s[6]=i("th",null,"3",-1))])])]),s[43]||(s[43]=i("p",null,[l("将"),i("code",null,"0"),l("作为有序数组，选择剩余元素中的最小值"),i("code",null,"1"),l("与第二个元素"),i("code",null,"6"),l("替换。")],-1)),s[44]||(s[44]=i("p",null,"此时数组为：",-1)),i("table",ls,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[7]||(s[7]=[l("0")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[8]||(s[8]=[l("1")])),_:1})]),s[10]||(s[10]=i("th",null,"4",-1)),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[9]||(s[9]=[l("2")])),_:1})]),s[11]||(s[11]=i("th",null,"9",-1)),s[12]||(s[12]=i("th",null,"6",-1)),s[13]||(s[13]=i("th",null,"3",-1))])])]),s[45]||(s[45]=i("p",null,[l("将"),i("code",null,"0"),l(),i("code",null,"1"),l("作为有序数组，选择剩余元素中的最小值"),i("code",null,"2"),l("与第三个元素"),i("code",null,"4"),l("替换。")],-1)),s[46]||(s[46]=i("p",null,"此时数组为：",-1)),i("table",as,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[14]||(s[14]=[l("0")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[15]||(s[15]=[l("1")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[16]||(s[16]=[l("2")])),_:1})]),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[17]||(s[17]=[l("4")])),_:1})]),s[18]||(s[18]=i("th",null,"9",-1)),s[19]||(s[19]=i("th",null,"6",-1)),s[20]||(s[20]=i("th",null,"3",-1))])])]),s[47]||(s[47]=i("p",null,[l("将"),i("code",null,"0"),l(),i("code",null,"1"),l(),i("code",null,"2"),l("作为有序数组，选择剩余元素中的最小值"),i("code",null,"3"),l("与第四个元素"),i("code",null,"9"),l("替换。")],-1)),s[48]||(s[48]=i("p",null,"此时数组为：",-1)),i("table",ts,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[21]||(s[21]=[l("0")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[22]||(s[22]=[l("1")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[23]||(s[23]=[l("2")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[24]||(s[24]=[l("3")])),_:1})]),s[26]||(s[26]=i("th",null,"9",-1)),s[27]||(s[27]=i("th",null,"6",-1)),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[25]||(s[25]=[l("4")])),_:1})])])])]),s[49]||(s[49]=f("<p>将<code>0</code> <code>1</code> <code>2</code> <code>3</code>作为有序数组，选择剩余元素中的最小值<code>4</code>与第五个元素<code>9</code>替换。</p><p>此时数组为：</p>",2)),i("table",ns,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[28]||(s[28]=[l("0")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[29]||(s[29]=[l("1")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[30]||(s[30]=[l("2")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[31]||(s[31]=[l("3")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[32]||(s[32]=[l("4")])),_:1})]),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[33]||(s[33]=[l("9")])),_:1})]),s[34]||(s[34]=i("th",null,"6",-1))])])]),s[50]||(s[50]=f("<p>将<code>0</code> <code>1</code> <code>2</code> <code>3</code> <code>4</code>作为有序数组，选择剩余元素中的最小值<code>6</code>与第六个元素<code>9</code>替换。</p><p>此时数组为：</p>",2)),i("table",es,[i("thead",null,[i("tr",null,[i("th",null,[n(t,{color:"red"},{default:e(()=>s[35]||(s[35]=[l("0")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[36]||(s[36]=[l("1")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[37]||(s[37]=[l("2")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[38]||(s[38]=[l("3")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[39]||(s[39]=[l("4")])),_:1})]),i("th",null,[n(t,{color:"red"},{default:e(()=>s[40]||(s[40]=[l("6")])),_:1})]),i("th",null,[n(t,{color:"blue"},{default:e(()=>s[41]||(s[41]=[l("9")])),_:1})])])])]),s[51]||(s[51]=f(`<p>剩余一个最大值，排序完成。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SelectionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myArray);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //输出：0 1 2 3 4 6 9 10 15</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//选择排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (besortedArray[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[index]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        besortedArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[index];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        besortedArray[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="可视化" tabindex="-1">可视化 <a class="header-anchor" href="#可视化" aria-label="Permalink to &quot;可视化&quot;">​</a></h2>`,5)),n(ss)])}}});export{rs as __pageData,ds as default};
