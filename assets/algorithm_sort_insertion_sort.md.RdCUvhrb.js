import{p as g,v as j,q as N,c as C,o as _,j as i,ae as S,af as V,t as R,C as H,ag as y,G as n,w as e,a as h}from"./chunks/framework.BZdfrRur.js";import{s as v,R as $}from"./chunks/visual.DiLKMx0U.js";const z={class:"hsAV-visu"},L={class:"hsAV-visu_option"},M={class:"hsAV-visu_option_array_control"},G={class:"hsAV-visu_option_array_control-length"},O=["disabled"],U={class:"hsAV-visu_option_array_control-interval"},J=["disabled"],K={class:"hsAV-visu_option_array_control-button"},Q=["disabled"],W=["disabled"],X={key:0,class:"text"},Y={key:1,class:"text"},Z={class:"hsAV-visu_option_array_value"},ss={__name:"insertion_sort",setup(I){const u=g(),s=g(),l=g(200),r=g(new Array),F=g(!1),f=g(!1);let p=new Array,A=new Array,k=new Array,b=0,D=0,c=0;j(()=>{window.addEventListener("resize",()=>{m()})}),N(s,()=>{s.value>500?s.value=500:s.value<0||typeof s.value!="number"?s.value=0:typeof s.value=="number"&&q(s.value)});const P=()=>{B(),o()},w=async()=>{if(F.value=!0,f.value=!0,p.length>=2){k=new Array(p.length);for(let a=0;a<p.length;a++)k[a]={index:a,value:A[a]};for(let a=1;a<k.length;a++)for(let t=0;t<a;t++)if(t===0?(o([{index:a,color:"#98fb98"},{index:t,color:"#ffff20"}]),await v(l.value)):(o([{index:t-1,color:"#ffff20"},{index:a,color:"#98fb98"},{index:t,color:"#ffff20"}]),await v(l.value)),t===0&&k[a].value<=k[t].value){let E=k[a];for(let d=a;d>t;d--)k[d]=k[d-1];k[t]=E,x(),T(),o([{index:t,color:"#98fb98"},{index:a,color:"#ffff20"}]),await v(l.value+600);break}else if(k[a].value<=k[t].value&&k[a].value>k[t-1].value){let E=k[a];for(let d=a;d>t;d--)k[d]=k[d-1];k[t]=E,x(),T(),o([{index:t+1,color:"#ffff20"},{index:t,color:"#98fb98"},{index:t-1,color:"#ffff20"}]),await v(l.value+600);break}console.log(k)}o(),F.value=!1,f.value=!1},q=a=>{s.value=a,m(),B(),o()},m=()=>{b=u.value.getBoundingClientRect().width/s.value,D=u.value.getBoundingClientRect().height},B=()=>{c=0,r.value=new Array(s.value),A=new Array(s.value),p=new Array(s.value);for(let a=0;a<r.value.length;a++)r.value[a]=Math.round(Math.random()*1e3),r.value[a]>c&&(c=r.value[a]),A[a]=r.value[a],p[a]=a},x=()=>{for(let a=0;a<k.length;a++)p[k[a].index]=a},T=()=>{for(let a=0;a<p.length;a++)r.value[p[a]]=A[a]},o=(a=[{index:-1,color:"red"}])=>{$(A,p,b,D,c,a,u.value)};return(a,t)=>(_(),C("div",z,[i("div",{class:"hsAV-visu_visual",ref_key:"visualDiv",ref:u},null,512),i("div",L,[i("div",M,[i("div",G,[t[2]||(t[2]=i("span",{class:"text"},"数组长度",-1)),S(i("input",{type:"number","onUpdate:modelValue":t[0]||(t[0]=E=>s.value=E),disabled:F.value,min:"0",max:"500",placeholder:"0 - 500"},null,8,O),[[V,s.value]])]),i("div",U,[t[3]||(t[3]=i("span",{class:"text"},"动画间隔",-1)),S(i("input",{type:"number","onUpdate:modelValue":t[1]||(t[1]=E=>l.value=E),disabled:F.value,min:"0",max:"1000",placeholder:"1000"},null,8,J),[[V,l.value]])]),i("div",K,[i("button",{class:"reassign",disabled:F.value,onClick:P},t[4]||(t[4]=[i("div",{class:"text"},"重新赋值",-1)]),8,Q),i("button",{class:"start",disabled:f.value,onClick:w},[f.value?(_(),C("div",X,"运行中")):(_(),C("div",Y,"开始"))],8,W)])]),i("div",Z,[t[5]||(t[5]=i("div",{class:"text"},"数组：",-1)),i("div",null,R(r.value),1)])])]))}},is={tabindex:"0"},as={tabindex:"0"},ls={tabindex:"0"},ts={tabindex:"0"},ns={tabindex:"0"},es={tabindex:"0"},ds=JSON.parse('{"title":"插入排序 Insertion Sort","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/insertion_sort.md","filePath":"algorithm/sort/insertion_sort.md"}'),hs={name:"algorithm/sort/insertion_sort.md"},rs=Object.assign(hs,{setup(I){return(u,s)=>{const l=H("font");return _(),C("div",null,[s[42]||(s[42]=y('<h1 id="插入排序-insertion-sort" tabindex="-1">插入排序 Insertion Sort <a class="header-anchor" href="#插入排序-insertion-sort" aria-label="Permalink to &quot;插入排序 Insertion Sort&quot;">​</a></h1><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>插入排序（Insertion Sort）是一种简单直观的排序算法，灵感来自整理扑克牌的过程。在排序时，每次从未排序部分中取出一个元素，将它插入到已排序部分的适当位置，直到所有元素都被插入。其特点是操作相对简单，但效率较低，适用于小规模数据的排序。</p><p>其具体步骤如下：</p><ol><li>从第二个元素开始，将当前元素与它前面已排序的元素进行比较。</li><li>如果当前元素比前面的某个元素小，则将其插入到该元素前面。</li><li>重复上述步骤，直到所有元素都排序完成。</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>有一组无序数组：</p><table tabindex="0"><thead><tr><th>6</th><th>2</th><th>4</th><th>1</th><th>9</th><th>0</th><th>3</th></tr></thead></table><p>此时将<code>6</code>作为有序数组，用<code>2</code>向前比对。此时<code>2</code>比<code>6</code>小，<code>2</code>插入<code>6</code>前面。</p><p>此时数组为：</p>',10)),i("table",is,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"blue"},{default:e(()=>s[0]||(s[0]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[1]||(s[1]=[h("6")])),_:1})]),s[2]||(s[2]=i("th",null,"4",-1)),s[3]||(s[3]=i("th",null,"1",-1)),s[4]||(s[4]=i("th",null,"9",-1)),s[5]||(s[5]=i("th",null,"0",-1)),s[6]||(s[6]=i("th",null,"3",-1))])])]),s[43]||(s[43]=y("<p>此时将<code>2</code> <code>6</code>作为有序数组，用<code>4</code>从头比对。此时<code>4</code>比<code>2</code>大且<code>4</code>比<code>6</code>小，<code>4</code>插入<code>2</code>后<code>6</code>前。</p><p>此时数组为：</p>",2)),i("table",as,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"red"},{default:e(()=>s[7]||(s[7]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"blue"},{default:e(()=>s[8]||(s[8]=[h("4")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[9]||(s[9]=[h("6")])),_:1})]),s[10]||(s[10]=i("th",null,"1",-1)),s[11]||(s[11]=i("th",null,"9",-1)),s[12]||(s[12]=i("th",null,"0",-1)),s[13]||(s[13]=i("th",null,"3",-1))])])]),s[44]||(s[44]=y("<p>此时将<code>2</code> <code>4</code> <code>6</code>作为有序数组，用<code>1</code>从头比对。此时<code>1</code>比<code>2</code>小，<code>1</code>插入<code>2</code>前面。</p><p>此时数组为：</p>",2)),i("table",ls,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"blue"},{default:e(()=>s[14]||(s[14]=[h("1")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[15]||(s[15]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[16]||(s[16]=[h("4")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[17]||(s[17]=[h("6")])),_:1})]),s[18]||(s[18]=i("th",null,"9",-1)),s[19]||(s[19]=i("th",null,"0",-1)),s[20]||(s[20]=i("th",null,"3",-1))])])]),s[45]||(s[45]=y("<p>此时将<code>1</code> <code>2</code> <code>4</code> <code>6</code>作为有序数组，用<code>9</code>从头比对。此时<code>9</code>比最大值<code>6</code>大，<code>9</code>插入<code>6</code>后面。</p><p>此时数组为：</p>",2)),i("table",ts,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"red"},{default:e(()=>s[21]||(s[21]=[h("1")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[22]||(s[22]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[23]||(s[23]=[h("4")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[24]||(s[24]=[h("6")])),_:1})]),i("th",null,[n(l,{color:"blue"},{default:e(()=>s[25]||(s[25]=[h("9")])),_:1})]),s[26]||(s[26]=i("th",null,"0",-1)),s[27]||(s[27]=i("th",null,"3",-1))])])]),s[46]||(s[46]=y("<p>此时将<code>1</code> <code>2</code> <code>4</code> <code>6</code> <code>9</code>作为有序数组，用<code>0</code>从头比对。此时<code>0</code>比<code>1</code>小，<code>0</code>插入<code>1</code>前面。</p><p>此时数组为：</p>",2)),i("table",ns,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"blue"},{default:e(()=>s[28]||(s[28]=[h("0")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[29]||(s[29]=[h("1")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[30]||(s[30]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[31]||(s[31]=[h("4")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[32]||(s[32]=[h("6")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[33]||(s[33]=[h("9")])),_:1})]),s[34]||(s[34]=i("th",null,"3",-1))])])]),s[47]||(s[47]=y("<p>此时将<code>0</code> <code>1</code> <code>2</code> <code>4</code> <code>6</code> <code>9</code>作为有序数组，用<code>3</code>从头比对。此时<code>3</code>比<code>2</code>大且<code>3</code>比<code>4</code>小，<code>3</code>插入<code>2</code>后<code>4</code>前。</p><p>此时数组为：</p>",2)),i("table",es,[i("thead",null,[i("tr",null,[i("th",null,[n(l,{color:"red"},{default:e(()=>s[35]||(s[35]=[h("0")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[36]||(s[36]=[h("1")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[37]||(s[37]=[h("2")])),_:1})]),i("th",null,[n(l,{color:"blue"},{default:e(()=>s[38]||(s[38]=[h("3")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[39]||(s[39]=[h("4")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[40]||(s[40]=[h("6")])),_:1})]),i("th",null,[n(l,{color:"red"},{default:e(()=>s[41]||(s[41]=[h("9")])),_:1})])])])]),s[48]||(s[48]=y(`<p>排序完成。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InsertionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InsertionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myArray);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //输出：0 1 2 3 4 6 9 10 15</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//插入排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InsertionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (select) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j; k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    besortedArray[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                besortedArray[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="可视化" tabindex="-1">可视化 <a class="header-anchor" href="#可视化" aria-label="Permalink to &quot;可视化&quot;">​</a></h2>`,5)),n(ss)])}}});export{ds as __pageData,rs as default};
