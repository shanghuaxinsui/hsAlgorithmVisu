import{p as E,v as P,q as H,c as A,o as v,j as i,ae as m,af as x,t as N,C as R,ag as c,G as h,w as k,a}from"./chunks/framework.BZdfrRur.js";import{s as _,R as $}from"./chunks/visual.DiLKMx0U.js";const I={class:"hsAV-visu"},z={class:"hsAV-visu_option"},L={class:"hsAV-visu_option_array_control"},M={class:"hsAV-visu_option_array_control-length"},G=["disabled"],O={class:"hsAV-visu_option_array_control-interval"},U=["disabled"],J={class:"hsAV-visu_option_array_control-button"},K=["disabled"],Q=["disabled"],W={key:0,class:"text"},X={key:1,class:"text"},Y={class:"hsAV-visu_option_array_value"},Z={__name:"bubble_sort",setup(V){const o=E(),s=E(),t=E(200),r=E(new Array),g=E(!1),F=E(!1);let p=new Array,y=new Array,e=new Array,C=0,f=0,b=0;P(()=>{window.addEventListener("resize",()=>{D()})}),H(s,()=>{s.value>500?s.value=500:s.value<0||typeof s.value!="number"?s.value=0:s.value&&typeof s.value=="number"&&q(s.value)});const w=()=>{B(),d()},S=async()=>{if(g.value=!0,F.value=!0,p.length>=2){e=new Array(p.length);for(let l=0;l<p.length;l++)e[l]={index:l,value:y[l]};for(let l=0;l<e.length-1;l++)for(let n=0;n<e.length-l-1;n++){if(d([{index:n,color:"#98fb98"},{index:n+1,color:"#ffff20"}]),await _(t.value),e[n].value>e[n+1].value){let u=e[n];e[n]=e[n+1],e[n+1]=u,T(),j(),d([{index:n+1,color:"#98fb98"},{index:n,color:"#ffff20"}]),await _(t.value+600)}d([{index:n,color:"#98fb98"},{index:n+1,color:"#ffff20"}])}}d(),g.value=!1,F.value=!1},q=l=>{s.value=l,D(),B(),d()},D=()=>{C=o.value.getBoundingClientRect().width/s.value,f=o.value.getBoundingClientRect().height},B=()=>{b=0,r.value=new Array(s.value),y=new Array(s.value),p=new Array(s.value);for(let l=0;l<r.value.length;l++)r.value[l]=Math.round(Math.random()*1e3),r.value[l]>b&&(b=r.value[l]),y[l]=r.value[l],p[l]=l},T=()=>{for(let l=0;l<e.length;l++)p[e[l].index]=l},j=()=>{for(let l=0;l<p.length;l++)r.value[p[l]]=y[l]},d=(l=[{index:-1,color:"red"}])=>{$(y,p,C,f,b,l,o.value)};return(l,n)=>(v(),A("div",I,[i("div",{class:"hsAV-visu_visual",ref_key:"visualDiv",ref:o},null,512),i("div",z,[i("div",L,[i("div",M,[n[2]||(n[2]=i("span",{class:"text"},"数组长度",-1)),m(i("input",{type:"number","onUpdate:modelValue":n[0]||(n[0]=u=>s.value=u),disabled:g.value,min:"0",max:"500",placeholder:"0 - 500"},null,8,G),[[x,s.value]])]),i("div",O,[n[3]||(n[3]=i("span",{class:"text"},"动画间隔",-1)),m(i("input",{type:"number","onUpdate:modelValue":n[1]||(n[1]=u=>t.value=u),disabled:g.value,min:"0",max:"1000",placeholder:"1000"},null,8,U),[[x,t.value]])]),i("div",J,[i("button",{class:"reassign",disabled:g.value,onClick:w},n[4]||(n[4]=[i("div",{class:"text"},"重新赋值",-1)]),8,K),i("button",{class:"start",disabled:F.value,onClick:S},[F.value?(v(),A("div",W,"运行中")):(v(),A("div",X,"开始"))],8,Q)])]),i("div",Y,[n[5]||(n[5]=i("div",{class:"text"},"数组：",-1)),i("div",null,N(r.value),1)])])]))}},ss={tabindex:"0"},is={tabindex:"0"},as={tabindex:"0"},ls={tabindex:"0"},ns={tabindex:"0"},ts={tabindex:"0"},ps=JSON.parse('{"title":"冒泡排序 Bubble Sort","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/bubble_sort.md","filePath":"algorithm/sort/bubble_sort.md"}'),hs={name:"algorithm/sort/bubble_sort.md"},rs=Object.assign(hs,{setup(V){return(o,s)=>{const t=R("font");return v(),A("div",null,[s[24]||(s[24]=c('<h1 id="冒泡排序-bubble-sort" tabindex="-1">冒泡排序 Bubble Sort <a class="header-anchor" href="#冒泡排序-bubble-sort" aria-label="Permalink to &quot;冒泡排序 Bubble Sort&quot;">​</a></h1><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法，其核心思想是通过相邻元素的比较和交换，把较大的元素逐渐“冒泡”到序列的末尾，从而完成排序。</p><p>其具体步骤如下：</p><ol><li>比较相邻的元素，如果前一个比后一个大，就交换它们的位置。</li><li>每一轮遍历完成后，当前未排序部分中最大的元素会被放到末尾。</li><li>重复上述步骤，对未排序部分继续进行比较和交换，直到整个序列有序。</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>有一组无序数组：</p><table tabindex="0"><thead><tr><th>6</th><th>2</th><th>4</th><th>1</th></tr></thead></table><p>从头开始依次比较，<code>6</code>比<code>2</code>大，<code>6</code>与<code>2</code>交换。</p><p>此时数组为：</p>',10)),i("table",ss,[i("thead",null,[i("tr",null,[i("th",null,[h(t,{color:"red"},{default:k(()=>s[0]||(s[0]=[a("2")])),_:1})]),i("th",null,[h(t,{color:"blue"},{default:k(()=>s[1]||(s[1]=[a("6")])),_:1})]),s[2]||(s[2]=i("th",null,"4",-1)),s[3]||(s[3]=i("th",null,"1",-1))])])]),s[25]||(s[25]=i("p",null,[a("顺次比较，"),i("code",null,"6"),a("比"),i("code",null,"4"),a("大，"),i("code",null,"6"),a("与"),i("code",null,"4"),a("交换。")],-1)),s[26]||(s[26]=i("p",null,"此时数组为：",-1)),i("table",is,[i("thead",null,[i("tr",null,[s[6]||(s[6]=i("th",null,"2",-1)),i("th",null,[h(t,{color:"red"},{default:k(()=>s[4]||(s[4]=[a("4")])),_:1})]),i("th",null,[h(t,{color:"blue"},{default:k(()=>s[5]||(s[5]=[a("6")])),_:1})]),s[7]||(s[7]=i("th",null,"1",-1))])])]),s[27]||(s[27]=i("p",null,[a("顺次比较，"),i("code",null,"6"),a("比"),i("code",null,"1"),a("大，"),i("code",null,"6"),a("与"),i("code",null,"1"),a("交换。")],-1)),s[28]||(s[28]=i("p",null,"第一轮比较结束，此时数组为：",-1)),i("table",as,[i("thead",null,[i("tr",null,[s[10]||(s[10]=i("th",null,"2",-1)),s[11]||(s[11]=i("th",null,"4",-1)),i("th",null,[h(t,{color:"red"},{default:k(()=>s[8]||(s[8]=[a("1")])),_:1})]),i("th",null,[h(t,{color:"blue"},{default:k(()=>s[9]||(s[9]=[a("6")])),_:1})])])])]),s[29]||(s[29]=i("p",null,[a("从头开始依次比较，"),i("code",null,"2"),a("比"),i("code",null,"4"),a("小，不交换。")],-1)),s[30]||(s[30]=i("p",null,"此时数组为：",-1)),i("table",ls,[i("thead",null,[i("tr",null,[i("th",null,[h(t,{color:"blue"},{default:k(()=>s[12]||(s[12]=[a("2")])),_:1})]),i("th",null,[h(t,{color:"red"},{default:k(()=>s[13]||(s[13]=[a("4")])),_:1})]),s[14]||(s[14]=i("th",null,"1",-1)),s[15]||(s[15]=i("th",null,"6",-1))])])]),s[31]||(s[31]=i("p",null,[a("顺次比较，"),i("code",null,"4"),a("比"),i("code",null,"1"),a("大，"),i("code",null,"4"),a("与"),i("code",null,"1"),a("交换。")],-1)),s[32]||(s[32]=i("p",null,"第二轮比较结束，此时数组为：",-1)),i("table",ns,[i("thead",null,[i("tr",null,[s[18]||(s[18]=i("th",null,"2",-1)),i("th",null,[h(t,{color:"red"},{default:k(()=>s[16]||(s[16]=[a("1")])),_:1})]),i("th",null,[h(t,{color:"blue"},{default:k(()=>s[17]||(s[17]=[a("4")])),_:1})]),s[19]||(s[19]=i("th",null,"6",-1))])])]),s[33]||(s[33]=i("p",null,[a("最终比较，"),i("code",null,"2"),a("比"),i("code",null,"1"),a("小，"),i("code",null,"2"),a("与"),i("code",null,"1"),a("交换。")],-1)),s[34]||(s[34]=i("p",null,"此时数组为：",-1)),i("table",ts,[i("thead",null,[i("tr",null,[i("th",null,[h(t,{color:"blue"},{default:k(()=>s[20]||(s[20]=[a("1")])),_:1})]),i("th",null,[h(t,{color:"red"},{default:k(()=>s[21]||(s[21]=[a("2")])),_:1})]),s[22]||(s[22]=i("th",null,"4",-1)),s[23]||(s[23]=i("th",null,"6",-1))])])]),s[35]||(s[35]=c(`<p>排序完成。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myArray);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //输出：0 1 2 3 4 6 9 10 15</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">besortedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (besortedArray[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                besortedArray[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                besortedArray[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> besortedArray;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="可视化" tabindex="-1">可视化 <a class="header-anchor" href="#可视化" aria-label="Permalink to &quot;可视化&quot;">​</a></h2>`,5)),h(Z)])}}});export{ps as __pageData,rs as default};
